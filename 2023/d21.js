const input = `...................................................................................................................................
.#.................#....#...........#..........#...#.#....#.........................#...........................#......#...........
....#..............##............#.................#...................#.#.....#..##......#...........#...#............#.....##....
....##..##..........#...........#....#......#.......#.........................#.......#.................#.....................#..#.
.......##....###...#.#......###.#............#..#...............................#......#.........#..#.....#........................
.......###......#..#........................##....#.##..........#................................#....##.........#..........#......
......#.....#..#.............#.............#...#................#...............#.....#.#......#..#.#................#..#.#.#.#....
.......#...#...........................#..#........................#..............#..#....#.#...#..#.............##.........#......
....#.#....#........................#........#.......#.........#.........................................#....#....................
..........................##..###.#....#...##..#...............#...............#...#...#.#.........#....................#.......#..
.....#.......#.....##....#.....................................#..#...............##.....##.#..............#.........#..#.....#....
...#..#......................#....#....#...#.#...............#......#.....................#.................#.##...#...............
.........#........#........#......................................................................................#.....#..........
..............#.......#..#.#...##..........................#......#.#............................#.#.....#....................#....
.....#.#......#.............##...#......#...........................................#...................#..........#.#..#........#.
...##...#...............................#....................#..#.....................##.......#....#.....#..#................#....
.#..#..............#...#......#..#......................#....#......##..#...............#.....#......#......##...#......#..........
.................#.................##..........................#...#....#.............#..........##............#.....#.............
...........#...#..........................#...........................#.................#..#..#...#.....#........#....#....#.#.....
.............#.......#................#............................#........................#........#............#..#........#....
...#....................#.........##..........................#.............................#.....#..........#.#...................
.................#............#.......................##...............#.........#.................#......#........#...#...........
............#......#...#....#.......................#...#....#...............#..............#.....#.........###.....#..........#...
.......#.........#....#....##......#.#.....................#..........##......##...............#...............##......#...........
.............#........#........................#...#.....#.................#....#........................#......#..................
..........#.......#......#...................##........#.....#.....#.....#....................#...#.............#........#.........
...................##....#....................#.......#..#........#.#....#..#.......#.#....................#.#.#.....#.........##..
.............#......#..#.#...................#....................#..........#..#................#..........#...###................
...#........#..#....#............................#.....##......................#.........#.........#........#...#.#................
...#.#......#......#...#.................#......#.#....................#...............................##..............#........#..
.............#......#....#..........................................##......##....#.....................#..............#.....#.....
.#...........................#............#....##..#..............#.#........#..#.........#........................#...#...........
.........#.......#.#..#...#.....................#..#.....##.......#.........#...#....#....................#.##....#.#........#.....
.......................................#.........#.....................#........#.....#........................#................##.
....###.....#...........................#.........#.#.........................#....#......#..................##........#..#........
.........................................#.............#.................................#.#..#..............................#.....
.#..#........#.........................##...#...##.......#..#.....#.........#.......#.....#.....................#...#......#..##...
..........#......#...............#...#..................#......#.....#........#.#...........#....#.............................#...
............#....#...............#.................#............................#...........#...#..................................
....#.##.........#..#.................#.....#.##..........#.#.........#.....#..#...#........#..#..#...........................#....
......#..........................#.....#..#.................###..........#.......#.................#..............#.........##.#...
.........#.#.#...............#.#....#.#............#..........................#.....................#.............#..........#..#..
...............#.........................#...............#........#..#.........#.......................#........................#..
.....#...##...#...................#...#.........#...................#.........#....#..........#......................##.......#....
...........................#.........................#...#.##............#..........#....##....#........#.................###......
.........#..............#....#....#.....................#.......#...........#....#...#.#......#.....................#....#.....#...
....#.#....##..#.............#.....#.........#...............#....#...............................#.....#.............#..#.........
........#.#...............#.......#........................##..#.............#..................................................#..
....#.......#................................##....#.#..#..#................#......................#..................#............
..........##..........#...#...#............#............#..........#.#.........#...#..#.......#.............................#......
...#................#....#..........#..##...............#.......#.#...#..##.....##..#..........#.........#......................##.
..#......##................................#...........#.....#....###......#.#.......#............#............#........#..........
.##.#....#...........#...#.................#.....##...#........................#..#......#..#.........#......................#.....
.....................##.....................................#............#....#...........#.#...#...............#..........#.......
...#....................##.......##.........#............##.............#..................#...................................#...
....#...........................##.....#....#...................................#.......#..##.......#...........#...#..............
..#............#.................#....#...#....#.....................#.......##...........#...#..............................#.....
.............................#....#....#.........#...........................#.............##.......................#..............
...#..........#...............#..........#.........#.....#........#................##............#..........#....#....##...........
.#................#...#............#.#............#...#......#......#........#...................##.........#....................#.
.#.............#........#.....#...#...............#............#........#.......#..#.....................##......#......#........#.
.....................#..........#...#.........#.#.....#.#..........#...#..........#.#..........#.................##................
...............#........................##...#.......#.......#..#....#.............#..#......#.....#........##.....................
..............#...........##............#.........#.............#........#...#....#...............##.............#.................
............#.................#........#..............#................................#.....##.#..........#..........#............
.................................................................S.................................................................
........###.............#......#...#..#.#.........#......#......#........#..#...#....#.......#...#.#...#...#......#.........#......
......................#.#.#.....#...#.#.#....#..#...............................##..#.......#.............#.....#..................
..........#.#.........##..#.#.#.........##............#.#..#............#..##.....#......#..#..#.#.#.......#.....#.................
...........#.#...#......#..............................#......#.................................#.#...#.............##.............
..................................#................#..............#..........#...#........#........................................
..........#.........#.#........#..........#..#............#.......#....#..##..........#..........................#...............#.
...........#..#.##..............##.#......#.....#.#......#.................#....#.....#........#.#.......#....#.................#..
..............#..........#...#........#......#......#...#..........#.....#.........#.........#...........#........#..#.............
.....#..................#................#...#......#.........................#....#...#..........#....#..#..##....................
.#.............................#.....#................#........#........#........#....#........................................#...
.........................#.............#.........#............#.#.......#......#.........#...#..............#...#.#........#.......
................#.#......#....##........................#....#....#...........#.......#...........#.........................#......
....##...#........#......#......#...#....#....#....#....#....#.....#..........#.#.#.#......................#..##..............#....
............................#........#......#...#.....#................##..#........#...........#...#..#.......#........#........#.
...........#.......#..##........#....#.##...............#......#.........#................#..#......#...................#..........
......#.............#...##..............#...#.......................................#.......#...#..........#...................##..
........#............##.#.......#..........#......#.....................................#.......#..................................
.............................#...............#.................#.....#.......#.#...........#...........#.............#.............
...#....####...................#..##.........................#..#.........#................##....#.#.##............................
..#.#..#.......#............................#.......................#.#...........#.........................................#..#.#.
......#......#..#............#......#....#.......#..#.......#................#.......#................#............................
.....#.##..#..#.............#.........#......#.#..............................##..#..................#.............#.......#.......
......#..#.#......................#...........#.............#.........#....#.....#.#.............#..............#..................
...........#.....................................#........##....#.............###.###...#...#.......#..........#........#......#...
...#...............#..................#....#..#....#.........##.........#....###..#...#..........#.......................#.#.#.....
....#.........#.................#.......#....##...#..#.#...#..#.........#.#...#......#..............#...................#.......#..
................................................#...#.#....#.......#.................#......#..................##.#.....#.......#..
........#...#.....................................#.........#.......#......#...................##...........................#......
..................#................#...........##....#....##............................#...#.##...........##..........##..#.......
......#............#..............#..#.......#................#...##.....#.........##..........................#...#..........##...
.#....#.......#.#.........#.....................................#..#...##....#....#........#.............#...................#.....
.........#.......#.#................................#...#............#.................#...............#.........#........#....#...
...........#.................#..................##.....#..........#.....#.......#.......##.....................#.............#.....
...#......#.......#......................#.........#.#....#.........................................#.....#....#...................
............#.....#...........#..........#............................#...##........................#..#...#...#.#.................
.....#..............#.#........#.........#.......#......#...........................................#...#..#..........#...#........
......#.#..................#.....#..............#..#....#.......#...........#....#.......#........#....................#...##......
..#.............##................#..................##.#.....#.#..#..###...............#..........#..#....#..#.........#.#........
..............#....#..............#.................#....#...............###.#..#...#..#.........#.#.#.................#.......#.#.
....#..#..................#.....................#.................#..#....#.#.....#..................#...#....#...#................
.............###.................#.............##...................#...##.........##.........#........#.#..................#..#...
..........#........#......#.#.......#..........##......#....#.#.........#........................................#..#..............
.....#..............#.#............#....................#...........#..##..........#...........#.#....#.................#..........
......#...#.......#......#.....##..#....................#......#...#......#...............#....#.#................#................
.....#..........##....#................###.........#..#.....#...............#......................#.........##.....#...........#..
....#..##......#......#...............#.............#..#........#.......#.................#...........##...#.#.....#...............
.......#...........##..#.........#.....##.##.........#................#.....#................................#.#...................
.......#..#..........#.#.........#..#.....................###......#........................................#.#....................
.........#.#...........#.......##..........##................#........#....................##...............#...#...#....#.......#.
...............................#..#.#........................................................#.....#..............#.........#......
...........#........#.....##..#.....#.#......#....................................................#...........................#.##.
...............#..............#..#....#.#...............#.#..............................#.......#.................#............#..
.#.....#.............#.....#......#........................###.....#................................................###...#........
............................##...........#.#....................#.............................###.......#.#..#..................#..
.#..#.....#.#......#.......................##...................#........................................#................##...#...
.....#..........##........##..........................................................#.............#..............................
..............................#........#........#.............................#.#...#.............##...........#.............#.....
..#..#...........#.........#.....#....#.....#.................#..................#...#...................#...........#.#.....#.....
.......................#......#...#.........#.#................#............#...#..........#...#.....#....#......#...........#...#.
...#.............#...#........#....#.#.......##.#................................................#........#...........#.....#......
.........#.##..............#.....................................................#.......##.#.............................#........
.#........#.......#..#............#.#.#.....#.#.........#.........................................#........#........#.#.#..........
........##..............................................#................##.#.....#...........##....##.........#........#..........
...#...........#...#...........#..............#..........##............#.#.................##....#.#.........#......#.#............
...................................................................................................................................`

const input2 = `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`

class Grid{
  constructor(input){
    this.grid = input.split('\n').map(line => line.split(''))
    
    this.width = this.grid[0].length
    this.height = this.grid.length
  }

  isValid(x, y){
    return x >= 0 && x < this.width && y >= 0 && y < this.height
  }

  get(x, y){
    if(!this.isValid(x, y)){
      throw new Error(`Invalid coordinates: ${x}, ${y}`)
    }
    return this.grid[y][x]
  }

  set(x, y, value){
    if(!this.isValid(x, y)){
      throw new Error(`Invalid coordinates: ${x}, ${y}`)
    }
    this.grid[y][x] = value
  }

  getNextNonRockCells(x, y){
    const d = [[0, -1], [0, 1], [-1, 0], [1, 0]]
    return d.map(([dx, dy]) => [x + dx, y + dy])
      .filter(([x, y]) => this.isValid(x, y) && this.get(x, y) !== '#')
  }

  print(){
    console.log(this.grid.map(line => line.map(i=> typeof i == 'number' ? i.toString(36) : i).join('')).join('\n'))
    console.log()
  }
}

class InfiniteGrid{
  constructor (input) {
    this.originalGrid = input.split('\n').map(line => line.split(''))
    this.grid = this.originalGrid.map(line => line.map(v=>({'0_0' : v})))

    this.width = this.grid[0].length
    this.height = this.grid.length

    this.minX = 0
    this.maxX = this.width - 1
    this.minY = 0
    this.maxY = this.height - 1
  }

  xyToChunk(x,y){
    let chunkX = Math.floor(x / this.width)
    let chunkY = Math.floor(y / this.height)
    let X = x % this.width
    let Y = y % this.height
    if(X < 0){
      X += this.width
      // chunkX--
    }
    if(Y < 0){
      Y += this.height
      // chunkY--
    }
    return [chunkX, chunkY, X, Y]
  }
  chunkToXY(chunkX, chunkY, X, Y){
    let x = chunkX * this.width + X
    let y = chunkY * this.height + Y
    return [x, y]
  }

  get(x,y){
    const [chunkX, chunkY, X, Y] = this.xyToChunk(x,y)
    // console.log(chunkX, chunkY, X, Y, this.grid[Y][X][`${chunkX}_${chunkY}`], this.originalGrid[Y][X])
    let v = this.grid[Y][X][`${chunkX}_${chunkY}`]
    if( v === undefined ){
      v = this.originalGrid[Y][X]
    }
    return v
  }

  set(x,y,value){
    const [chunkX, chunkY, X, Y] = this.xyToChunk(x,y)
    this.grid[Y][X][`${chunkX}_${chunkY}`] = value

    this.minX = Math.min(this.minX, x)
    this.maxX = Math.max(this.maxX, x)
    this.minY = Math.min(this.minY, y)
    this.maxY = Math.max(this.maxY, y)
  }

  getNextNonRockCells (x, y) {
    const d = [[0, -1], [0, 1], [-1, 0], [1, 0]]
    return d.map(([dx, dy]) => [x + dx, y + dy])
      .filter(([x, y]) => this.get(x, y) !== '#')
  }

  print(){
    for(let y = this.minY; y <= this.maxY; y++){
      let line = ''
      for(let x = this.minX; x <= this.maxX; x++){
        const value = this.get(x,y)
        if( x%this.width ==0 ){
          line += ' |'
        }
        line += (typeof value === 'number' ? value.toString(36) : value).padStart(3, ' ')
      }
      if( y%this.height == 0){
        console.log('-'.repeat(line.length))
      }
      console.log(line)
    }
    console.log()    
  }

}

//part 1
// (function(input, nbSteps){

//   const grid = new Grid(input)
//   grid.print()
//   const todo = []
  
//   for(let x=0; x < grid.width; x++){
//     for (let y = 0; y < grid.height; y++){
//       if(grid.get(x, y) === 'S'){
//         todo.push([x, y])
//         grid.set(x, y, 0)
//       }
//     }
//   }
  
//   while(todo.length > 0){
//     const [x, y] = todo.shift()
//     const cellValue = grid.get(x, y)
    
//     const nextCells = grid.getNextNonRockCells(x, y)
//     for(const [x2, y2] of nextCells){
//       const nextCellValue = grid.get(x2, y2)
//       if( typeof nextCellValue !== 'number' || cellValue + 1 < nextCellValue ){
//         grid.set(x2, y2, cellValue + 1)
//         todo.push([x2, y2])
//       }        
//     }
//   }

//   grid.print()

//   let s = 0
//   for (let x = 0; x < grid.width; x++) {
//     for (let y = 0; y < grid.height; y++) {
//       const value = grid.get(x, y)
//       if( typeof value === 'number' ){
//         if( value <= nbSteps && (nbSteps - value) % 2 === 0 ){
//           s++
//         }
//       }
//     }
//   }
//   console.log(s)
  
  
// })(input, 64)

//part 2

(function(input, nbSteps){

  const grid = new InfiniteGrid(input)
  grid.print()
  const todo = []

  for (let x = 0; x < grid.width; x++) {
    for (let y = 0; y < grid.height; y++) {
      if (grid.get(x, y) === 'S') {
        todo.push([x, y])
        grid.set(x, y, 0)
      }
    }
  }

  while (todo.length > 0) {
    const [x, y] = todo.shift()
    const cellValue = grid.get(x, y)



    if( cellValue >= nbSteps ){
      continue
    }

    const nextCells = grid.getNextNonRockCells(x, y)
    for (const [x2, y2] of nextCells) {
      
      const [chunkX, chunkY, X, Y] = grid.xyToChunk(x2, y2)
      if( Math.abs(chunkX) + Math.abs(chunkY) > 4 ){
        continue
      }

      const nextCellValue = grid.get(x2, y2)
      if (typeof nextCellValue !== 'number' || cellValue + 1 < nextCellValue) {
        grid.set(x2, y2, cellValue + 1)
        todo.push([x2, y2])
      }
    }
    // grid.print()
  }

  // grid.print()

  let s=0

  for( let X=0; X<grid.width; X++){
    for( let Y=0; Y<grid.height; Y++){
      const cells = grid.grid[Y][X]
      if( typeof cells['0_0'] !== 'number' ){
        continue
      }

      for( const cell of Object.values(cells) ){
        if( cell <= nbSteps && (nbSteps - cell) % 2 === 0 ){
          s++
        }
      }

      //north
      const nStep = cells['0_-4'] - cells['0_-3']
      let v = cells['0_-4']
      for( let i=5 ; true ; i++ ){
        if( v+nStep <= nbSteps && (nbSteps - v - nStep) % 2 === 0 ){
          s += 1
        }

        v += nStep

        if( v >= nbSteps ){
          break
        }
      }

      //south
      const sStep = cells['0_4'] - cells['0_3']
      v = cells['0_4']
      for( let i=5 ; true ; i++ ){
        //south
        if( v+sStep <= nbSteps && (nbSteps - v - sStep) % 2 === 0 ){
          s += 1
        }

        v += sStep

        if( v >= nbSteps ){
          break
        }
      }

      //east
      const eStep = cells['4_0'] - cells['3_0']
      v = cells['4_0']
      for( let i=5 ; true ; i++ ){
        if( v+eStep <= nbSteps && (nbSteps - v - eStep) % 2 === 0 ){
          s += 1
        }
        v += eStep

        if( v >= nbSteps ){  
          break
        }
      }
      
      //west
      const wStep = cells['-4_0'] - cells['-3_0']
      v = cells['-4_0']
      for( let i=5 ; true ; i++ ){
        if( v+wStep <= nbSteps && (nbSteps - v - wStep) % 2 === 0 ){
          s += 1
        }
        v += wStep

        if( v >= nbSteps ){
          break
        }
      }

      //noth-west
      const nwStep = cells['-2_-2'] - cells['-1_-2']
      v = cells['-2_-2']
      for( let i=5 ; true ; i++ ){
        if( v+nwStep <= nbSteps && (nbSteps - v - nwStep) % 2 === 0 ){
          s += i-1
        }
        v += nwStep

        if( v >= nbSteps ){
          break
        }
      }

      //noth-east
      const neStep = cells['2_-2'] - cells['1_-2']
      v = cells['2_-2']
      for( let i=5 ; true ; i++ ){
        if( v+neStep <= nbSteps && (nbSteps - v - neStep) % 2 === 0 ){
          s += i-1
        }
        v += neStep

        if( v >= nbSteps ){
          break
        }
      }

      //south-west
      const swStep = cells['-2_2'] - cells['-1_2']
      v = cells['-2_2']
      for( let i=5 ; true ; i++ ){
        if( v+swStep <= nbSteps && (nbSteps - v - swStep) % 2 === 0 ){
          s += i-1
        }
        v += swStep

        if( v >= nbSteps ){
          break
        }
      }

      //south-east
      const seStep = cells['2_2'] - cells['1_2']
      v = cells['2_2']
      for( let i=5 ; true ; i++ ){
        if( v+seStep <= nbSteps && (nbSteps - v - seStep) % 2 === 0 ){
          s += i-1
        }
        v += seStep

        if( v >= nbSteps ){
          break
        }
      }
    }
  }
  console.log(s)

})(input, 26501365)
